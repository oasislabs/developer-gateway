package core

import (
	"fmt"

	"github.com/oasislabs/developer-gateway/rpc"
)

// SubID generates a subscription ID that uniquely
// identifies a subscription within the global namespace
func SubID(key string, id uint64) string {
	return fmt.Sprintf("%s-%d", key, id)
}

// ExecuteServiceRequest is is used by the user to trigger a service
// execution. A client is always subscribed to a subcription with
// topic "service" from which the client can retrieve the asynchronous
// results to this request
type ExecuteServiceRequest struct {
	// Data is a blob of data that the user wants to pass to the service
	// as argument
	Data string

	// Address where the service can be found
	Address string

	// Key is the identifier of the request issuer
	Key string
}

// DeployServiceRequest is issued by the user to trigger a service
// execution. A client is always subscribed to a subcription with
// topic "service" from which the client can retrieve the asynchronous
// results to this request
type DeployServiceRequest struct {
	// Data is a blob of data that the user wants to pass as argument for
	// the deployment of a service
	Data string

	// Key is the identifier of the request issuer
	Key string
}

// GetPublicKeyServiceRequest is a request to retrieve the public key
// associated with a specific service
type GetPublicKeyServiceRequest struct {
	// Address is the unique address that identifies the service,
	// is generated when a service is deployed and it can be used
	// for service execution
	Address string `json:"address"`
}

// GetPublicKeyServiceResponse is the response in which the public key
// associated with the contract is provided
type GetPublicKeyServiceResponse struct {
	// Timestamp at which the key expired
	Timestamp uint64

	// Address is the unique address that identifies the service,
	// is generated when a service is deployed and it can be used
	// for service execution
	Address string

	// PublicKey associated to the service
	PublicKey string

	// Signature from the key manager to authenticate the public key
	Signature string
}

// ErrorEvent is the event that can be polled by the user
// as a result to a a request that failed
type ErrorEvent struct {
	// ID to identifiy an asynchronous response. It uniquely identifies the
	// event and orders it in the sequence of events expected by the user
	ID uint64

	// Cause is the error that caused the event to failed
	Cause rpc.Error
}

// ExecuteServiceResponse is the event that can be polled by the user
// as a result to a ServiceExecutionRequest
type ExecuteServiceResponse struct {
	// ID to identify an asynchronous response. It uniquely identifies the
	// event and orders it in the sequence of events expected by the user
	ID uint64

	// Address is the unique address that identifies the service,
	// is generated when a service is deployed and it can be used
	// for service execution
	Address string

	// Output generated by the service at the end of its execution
	Output string
}

// DeployServiceResponse is the event that can be polled by the user
// as a result to a ServiceDeployRequest
type DeployServiceResponse struct {
	// ID to identify an asynchronous response. It uniquely identifies the
	// event and orders it in the sequence of events expected by the user
	ID uint64

	// Address is the unique address that identifies the service,
	// is generated when a service is deployed and it can be used
	// for service execution
	Address string
}

// DataEvent is that event that can be polled by the user to poll
// for service logs for example, which they are a blob of data that the
// client knows how to manipulate
type DataEvent struct {
	// ID to identify the event itself withint the sequence of events.
	ID uint64

	// Data is the blob of data related to this event
	Data string
}

// EventID is the implementation of rpc.Event for ExecuteServiceResponse
func (e ExecuteServiceResponse) EventID() uint64 {
	return e.ID
}

// EventID is the implementation of rpc.Event for DeployServiceResponse
func (e DeployServiceResponse) EventID() uint64 {
	return e.ID
}

// EventID is the implementation of rpc.Event for ErrorEvent
func (e ErrorEvent) EventID() uint64 {
	return e.ID
}

// EventID is the implementation of rpc.Event for DataEvent
func (e DataEvent) EventID() uint64 {
	return e.ID
}

// PollServiceRequest is a request issued by a client to
// retrieve a window of responses generated by
// asynchronous requests
type PollServiceRequest struct {
	// Offset at which events need to be provided. Events are all ordered
	// with sequence numbers and it is up to the client to specifiy which
	// events it wants to receive from an offset in the sequence
	Offset uint64

	// Count for the number of items the client would prefer to receive
	// at most from a single response
	Count uint

	// DiscardPrevious allows the client to define whether the server should
	// discard all the events that have a sequence number lower than the offer
	DiscardPrevious bool

	// Key is the identifier of the request issuer
	Key string
}

// SubscribeRequest is a request issued by the client to subscribe to a
// specific topic and receive events from it until the subscription is
// closed
type SubscribeRequest struct {
	// Topic is the subscription topic
	Topic string

	// Address will be used to filter events only issues by or to
	// the address
	Address string

	// Key is the identifier of the request issuer
	Key string
}

// PollEventRequest is a request issued by the client to
// poll events from an already created subscription
type PollEventRequest struct {
	// Offset at which events need to be provided. Events are all ordered
	// with sequence numbers and it is up to the client to specifiy which
	// events it wants to receive from an offset in the sequence
	Offset uint64

	// Count for the number of items the client would prefer to receive
	// at most from a single response
	Count uint

	// DiscardPrevious allows the client to define whether the server should
	// discard all the events that have a sequence number lower than the offer
	DiscardPrevious bool

	// ID is the unique identifier for a subscription based on
	// the user's key namespace
	ID uint64

	// Key is the identifier of the request issuer
	Key string
}

// UnsubscribeRequest is a request issued by the client to subscribe to a
// specific topic and receive events from it until the subscription is
// closed
type UnsubscribeRequest struct {
	// ID is the unique identifier for a subscription based on
	// the user's key namespace
	ID uint64

	// Key is the identifier of the request issuer
	Key string
}

type CreateSubscriptionRequest struct {
	// Topic is the subscription topic
	Topic string

	// Address will be used to filter events only issues by or to
	// the address
	Address string

	// SubID is the unique subscription's identifier
	SubID string
}

// UnsubscribeRequest is a request issued by the client to destroy
// an existing subscription
type DestroySubscriptionRequest struct {
	// SubID is the unique subscription's identifier
	SubID string
}
