// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ekiden/grpc/client.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubmitTxRequest struct {
	// Encoded transaction.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Runtime identifier.
	RuntimeId            []byte   `protobuf:"bytes,2,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTxRequest) Reset()         { *m = SubmitTxRequest{} }
func (m *SubmitTxRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTxRequest) ProtoMessage()    {}
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{0}
}

func (m *SubmitTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTxRequest.Unmarshal(m, b)
}
func (m *SubmitTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTxRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTxRequest.Merge(m, src)
}
func (m *SubmitTxRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTxRequest.Size(m)
}
func (m *SubmitTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTxRequest proto.InternalMessageInfo

func (m *SubmitTxRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubmitTxRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

type SubmitTxResponse struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTxResponse) Reset()         { *m = SubmitTxResponse{} }
func (m *SubmitTxResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTxResponse) ProtoMessage()    {}
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{1}
}

func (m *SubmitTxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTxResponse.Unmarshal(m, b)
}
func (m *SubmitTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTxResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTxResponse.Merge(m, src)
}
func (m *SubmitTxResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTxResponse.Size(m)
}
func (m *SubmitTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTxResponse proto.InternalMessageInfo

func (m *SubmitTxResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type WaitSyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitSyncRequest) Reset()         { *m = WaitSyncRequest{} }
func (m *WaitSyncRequest) String() string { return proto.CompactTextString(m) }
func (*WaitSyncRequest) ProtoMessage()    {}
func (*WaitSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{2}
}

func (m *WaitSyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitSyncRequest.Unmarshal(m, b)
}
func (m *WaitSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitSyncRequest.Marshal(b, m, deterministic)
}
func (m *WaitSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitSyncRequest.Merge(m, src)
}
func (m *WaitSyncRequest) XXX_Size() int {
	return xxx_messageInfo_WaitSyncRequest.Size(m)
}
func (m *WaitSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitSyncRequest proto.InternalMessageInfo

type WaitSyncResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitSyncResponse) Reset()         { *m = WaitSyncResponse{} }
func (m *WaitSyncResponse) String() string { return proto.CompactTextString(m) }
func (*WaitSyncResponse) ProtoMessage()    {}
func (*WaitSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{3}
}

func (m *WaitSyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitSyncResponse.Unmarshal(m, b)
}
func (m *WaitSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitSyncResponse.Marshal(b, m, deterministic)
}
func (m *WaitSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitSyncResponse.Merge(m, src)
}
func (m *WaitSyncResponse) XXX_Size() int {
	return xxx_messageInfo_WaitSyncResponse.Size(m)
}
func (m *WaitSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitSyncResponse proto.InternalMessageInfo

type IsSyncedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSyncedRequest) Reset()         { *m = IsSyncedRequest{} }
func (m *IsSyncedRequest) String() string { return proto.CompactTextString(m) }
func (*IsSyncedRequest) ProtoMessage()    {}
func (*IsSyncedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{4}
}

func (m *IsSyncedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsSyncedRequest.Unmarshal(m, b)
}
func (m *IsSyncedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsSyncedRequest.Marshal(b, m, deterministic)
}
func (m *IsSyncedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSyncedRequest.Merge(m, src)
}
func (m *IsSyncedRequest) XXX_Size() int {
	return xxx_messageInfo_IsSyncedRequest.Size(m)
}
func (m *IsSyncedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSyncedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsSyncedRequest proto.InternalMessageInfo

type IsSyncedResponse struct {
	// True if the node finished the initial sync.
	Synced               bool     `protobuf:"varint,1,opt,name=synced,proto3" json:"synced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSyncedResponse) Reset()         { *m = IsSyncedResponse{} }
func (m *IsSyncedResponse) String() string { return proto.CompactTextString(m) }
func (*IsSyncedResponse) ProtoMessage()    {}
func (*IsSyncedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{5}
}

func (m *IsSyncedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsSyncedResponse.Unmarshal(m, b)
}
func (m *IsSyncedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsSyncedResponse.Marshal(b, m, deterministic)
}
func (m *IsSyncedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSyncedResponse.Merge(m, src)
}
func (m *IsSyncedResponse) XXX_Size() int {
	return xxx_messageInfo_IsSyncedResponse.Size(m)
}
func (m *IsSyncedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSyncedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsSyncedResponse proto.InternalMessageInfo

func (m *IsSyncedResponse) GetSynced() bool {
	if m != nil {
		return m.Synced
	}
	return false
}

type WatchBlocksRequest struct {
	// Runtime identifier.
	RuntimeId            []byte   `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBlocksRequest) Reset()         { *m = WatchBlocksRequest{} }
func (m *WatchBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBlocksRequest) ProtoMessage()    {}
func (*WatchBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{6}
}

func (m *WatchBlocksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBlocksRequest.Unmarshal(m, b)
}
func (m *WatchBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBlocksRequest.Marshal(b, m, deterministic)
}
func (m *WatchBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBlocksRequest.Merge(m, src)
}
func (m *WatchBlocksRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBlocksRequest.Size(m)
}
func (m *WatchBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBlocksRequest proto.InternalMessageInfo

func (m *WatchBlocksRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

type WatchBlocksResponse struct {
	// A CBOR-serialized block.
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Block header hash.
	BlockHash            []byte   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBlocksResponse) Reset()         { *m = WatchBlocksResponse{} }
func (m *WatchBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*WatchBlocksResponse) ProtoMessage()    {}
func (*WatchBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{7}
}

func (m *WatchBlocksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBlocksResponse.Unmarshal(m, b)
}
func (m *WatchBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBlocksResponse.Marshal(b, m, deterministic)
}
func (m *WatchBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBlocksResponse.Merge(m, src)
}
func (m *WatchBlocksResponse) XXX_Size() int {
	return xxx_messageInfo_WatchBlocksResponse.Size(m)
}
func (m *WatchBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBlocksResponse proto.InternalMessageInfo

func (m *WatchBlocksResponse) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *WatchBlocksResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type GetBlockRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Round.
	Round                uint64   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockRequest) Reset()         { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()    {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{8}
}

func (m *GetBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockRequest.Unmarshal(m, b)
}
func (m *GetBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockRequest.Marshal(b, m, deterministic)
}
func (m *GetBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockRequest.Merge(m, src)
}
func (m *GetBlockRequest) XXX_Size() int {
	return xxx_messageInfo_GetBlockRequest.Size(m)
}
func (m *GetBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockRequest proto.InternalMessageInfo

func (m *GetBlockRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *GetBlockRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type GetBlockResponse struct {
	// A CBOR-serialized block.
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Block header hash.
	BlockHash            []byte   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockResponse) Reset()         { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()    {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{9}
}

func (m *GetBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockResponse.Unmarshal(m, b)
}
func (m *GetBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockResponse.Marshal(b, m, deterministic)
}
func (m *GetBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResponse.Merge(m, src)
}
func (m *GetBlockResponse) XXX_Size() int {
	return xxx_messageInfo_GetBlockResponse.Size(m)
}
func (m *GetBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResponse proto.InternalMessageInfo

func (m *GetBlockResponse) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *GetBlockResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type GetTxnRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Round.
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// Transaction index.
	Index                uint32   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxnRequest) Reset()         { *m = GetTxnRequest{} }
func (m *GetTxnRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxnRequest) ProtoMessage()    {}
func (*GetTxnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{10}
}

func (m *GetTxnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTxnRequest.Unmarshal(m, b)
}
func (m *GetTxnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTxnRequest.Marshal(b, m, deterministic)
}
func (m *GetTxnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxnRequest.Merge(m, src)
}
func (m *GetTxnRequest) XXX_Size() int {
	return xxx_messageInfo_GetTxnRequest.Size(m)
}
func (m *GetTxnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxnRequest proto.InternalMessageInfo

func (m *GetTxnRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *GetTxnRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GetTxnRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GetTxnResponse struct {
	// A CBOR-serialized TxnResult.
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxnResponse) Reset()         { *m = GetTxnResponse{} }
func (m *GetTxnResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxnResponse) ProtoMessage()    {}
func (*GetTxnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{11}
}

func (m *GetTxnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTxnResponse.Unmarshal(m, b)
}
func (m *GetTxnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTxnResponse.Marshal(b, m, deterministic)
}
func (m *GetTxnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxnResponse.Merge(m, src)
}
func (m *GetTxnResponse) XXX_Size() int {
	return xxx_messageInfo_GetTxnResponse.Size(m)
}
func (m *GetTxnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxnResponse proto.InternalMessageInfo

func (m *GetTxnResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetTxnByBlockHashRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Block hash.
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Transaction index.
	Index                uint32   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxnByBlockHashRequest) Reset()         { *m = GetTxnByBlockHashRequest{} }
func (m *GetTxnByBlockHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxnByBlockHashRequest) ProtoMessage()    {}
func (*GetTxnByBlockHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{12}
}

func (m *GetTxnByBlockHashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTxnByBlockHashRequest.Unmarshal(m, b)
}
func (m *GetTxnByBlockHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTxnByBlockHashRequest.Marshal(b, m, deterministic)
}
func (m *GetTxnByBlockHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxnByBlockHashRequest.Merge(m, src)
}
func (m *GetTxnByBlockHashRequest) XXX_Size() int {
	return xxx_messageInfo_GetTxnByBlockHashRequest.Size(m)
}
func (m *GetTxnByBlockHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxnByBlockHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxnByBlockHashRequest proto.InternalMessageInfo

func (m *GetTxnByBlockHashRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *GetTxnByBlockHashRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *GetTxnByBlockHashRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GetTxnByBlockHashResponse struct {
	// A CBOR-serialized TxnResult.
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxnByBlockHashResponse) Reset()         { *m = GetTxnByBlockHashResponse{} }
func (m *GetTxnByBlockHashResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxnByBlockHashResponse) ProtoMessage()    {}
func (*GetTxnByBlockHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{13}
}

func (m *GetTxnByBlockHashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTxnByBlockHashResponse.Unmarshal(m, b)
}
func (m *GetTxnByBlockHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTxnByBlockHashResponse.Marshal(b, m, deterministic)
}
func (m *GetTxnByBlockHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxnByBlockHashResponse.Merge(m, src)
}
func (m *GetTxnByBlockHashResponse) XXX_Size() int {
	return xxx_messageInfo_GetTxnByBlockHashResponse.Size(m)
}
func (m *GetTxnByBlockHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxnByBlockHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxnByBlockHashResponse proto.InternalMessageInfo

func (m *GetTxnByBlockHashResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetTransactionsRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Transaction root.
	Root                 []byte   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionsRequest) Reset()         { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()    {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{14}
}

func (m *GetTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsRequest.Unmarshal(m, b)
}
func (m *GetTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsRequest.Merge(m, src)
}
func (m *GetTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsRequest.Size(m)
}
func (m *GetTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsRequest proto.InternalMessageInfo

func (m *GetTransactionsRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *GetTransactionsRequest) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type GetTransactionsResponse struct {
	// Raw transactions.
	Txns                 [][]byte `protobuf:"bytes,1,rep,name=txns,proto3" json:"txns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionsResponse) Reset()         { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()    {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{15}
}

func (m *GetTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsResponse.Unmarshal(m, b)
}
func (m *GetTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsResponse.Merge(m, src)
}
func (m *GetTransactionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsResponse.Size(m)
}
func (m *GetTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsResponse proto.InternalMessageInfo

func (m *GetTransactionsResponse) GetTxns() [][]byte {
	if m != nil {
		return m.Txns
	}
	return nil
}

type QueryBlockRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Tag key.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Tag value.
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryBlockRequest) Reset()         { *m = QueryBlockRequest{} }
func (m *QueryBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockRequest) ProtoMessage()    {}
func (*QueryBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{16}
}

func (m *QueryBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryBlockRequest.Unmarshal(m, b)
}
func (m *QueryBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryBlockRequest.Marshal(b, m, deterministic)
}
func (m *QueryBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockRequest.Merge(m, src)
}
func (m *QueryBlockRequest) XXX_Size() int {
	return xxx_messageInfo_QueryBlockRequest.Size(m)
}
func (m *QueryBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockRequest proto.InternalMessageInfo

func (m *QueryBlockRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *QueryBlockRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryBlockRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryBlockResponse struct {
	// A CBOR-serialized block.
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Block header hash.
	BlockHash            []byte   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryBlockResponse) Reset()         { *m = QueryBlockResponse{} }
func (m *QueryBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockResponse) ProtoMessage()    {}
func (*QueryBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{17}
}

func (m *QueryBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryBlockResponse.Unmarshal(m, b)
}
func (m *QueryBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryBlockResponse.Marshal(b, m, deterministic)
}
func (m *QueryBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockResponse.Merge(m, src)
}
func (m *QueryBlockResponse) XXX_Size() int {
	return xxx_messageInfo_QueryBlockResponse.Size(m)
}
func (m *QueryBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockResponse proto.InternalMessageInfo

func (m *QueryBlockResponse) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *QueryBlockResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type QueryTxnRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Tag key.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Tag value.
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTxnRequest) Reset()         { *m = QueryTxnRequest{} }
func (m *QueryTxnRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxnRequest) ProtoMessage()    {}
func (*QueryTxnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{18}
}

func (m *QueryTxnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTxnRequest.Unmarshal(m, b)
}
func (m *QueryTxnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTxnRequest.Marshal(b, m, deterministic)
}
func (m *QueryTxnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxnRequest.Merge(m, src)
}
func (m *QueryTxnRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTxnRequest.Size(m)
}
func (m *QueryTxnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxnRequest proto.InternalMessageInfo

func (m *QueryTxnRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *QueryTxnRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryTxnRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryTxnResponse struct {
	// A CBOR-serialized TxnResult.
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTxnResponse) Reset()         { *m = QueryTxnResponse{} }
func (m *QueryTxnResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxnResponse) ProtoMessage()    {}
func (*QueryTxnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{19}
}

func (m *QueryTxnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTxnResponse.Unmarshal(m, b)
}
func (m *QueryTxnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTxnResponse.Marshal(b, m, deterministic)
}
func (m *QueryTxnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxnResponse.Merge(m, src)
}
func (m *QueryTxnResponse) XXX_Size() int {
	return xxx_messageInfo_QueryTxnResponse.Size(m)
}
func (m *QueryTxnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxnResponse proto.InternalMessageInfo

func (m *QueryTxnResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryTxnsRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// A CBOR-serialized query.
	Query                []byte   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTxnsRequest) Reset()         { *m = QueryTxnsRequest{} }
func (m *QueryTxnsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxnsRequest) ProtoMessage()    {}
func (*QueryTxnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{20}
}

func (m *QueryTxnsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTxnsRequest.Unmarshal(m, b)
}
func (m *QueryTxnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTxnsRequest.Marshal(b, m, deterministic)
}
func (m *QueryTxnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxnsRequest.Merge(m, src)
}
func (m *QueryTxnsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTxnsRequest.Size(m)
}
func (m *QueryTxnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxnsRequest proto.InternalMessageInfo

func (m *QueryTxnsRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *QueryTxnsRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

type QueryTxnsResponse struct {
	// CBOR-serialized results.
	Results              []byte   `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTxnsResponse) Reset()         { *m = QueryTxnsResponse{} }
func (m *QueryTxnsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxnsResponse) ProtoMessage()    {}
func (*QueryTxnsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{21}
}

func (m *QueryTxnsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTxnsResponse.Unmarshal(m, b)
}
func (m *QueryTxnsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTxnsResponse.Marshal(b, m, deterministic)
}
func (m *QueryTxnsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxnsResponse.Merge(m, src)
}
func (m *QueryTxnsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryTxnsResponse.Size(m)
}
func (m *QueryTxnsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxnsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxnsResponse proto.InternalMessageInfo

func (m *QueryTxnsResponse) GetResults() []byte {
	if m != nil {
		return m.Results
	}
	return nil
}

type WaitBlockIndexedRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Round.
	Round                uint64   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitBlockIndexedRequest) Reset()         { *m = WaitBlockIndexedRequest{} }
func (m *WaitBlockIndexedRequest) String() string { return proto.CompactTextString(m) }
func (*WaitBlockIndexedRequest) ProtoMessage()    {}
func (*WaitBlockIndexedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{22}
}

func (m *WaitBlockIndexedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitBlockIndexedRequest.Unmarshal(m, b)
}
func (m *WaitBlockIndexedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitBlockIndexedRequest.Marshal(b, m, deterministic)
}
func (m *WaitBlockIndexedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitBlockIndexedRequest.Merge(m, src)
}
func (m *WaitBlockIndexedRequest) XXX_Size() int {
	return xxx_messageInfo_WaitBlockIndexedRequest.Size(m)
}
func (m *WaitBlockIndexedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitBlockIndexedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitBlockIndexedRequest proto.InternalMessageInfo

func (m *WaitBlockIndexedRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *WaitBlockIndexedRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type WaitBlockIndexedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitBlockIndexedResponse) Reset()         { *m = WaitBlockIndexedResponse{} }
func (m *WaitBlockIndexedResponse) String() string { return proto.CompactTextString(m) }
func (*WaitBlockIndexedResponse) ProtoMessage()    {}
func (*WaitBlockIndexedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb6050da50c3e4, []int{23}
}

func (m *WaitBlockIndexedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitBlockIndexedResponse.Unmarshal(m, b)
}
func (m *WaitBlockIndexedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitBlockIndexedResponse.Marshal(b, m, deterministic)
}
func (m *WaitBlockIndexedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitBlockIndexedResponse.Merge(m, src)
}
func (m *WaitBlockIndexedResponse) XXX_Size() int {
	return xxx_messageInfo_WaitBlockIndexedResponse.Size(m)
}
func (m *WaitBlockIndexedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitBlockIndexedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitBlockIndexedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubmitTxRequest)(nil), "client.SubmitTxRequest")
	proto.RegisterType((*SubmitTxResponse)(nil), "client.SubmitTxResponse")
	proto.RegisterType((*WaitSyncRequest)(nil), "client.WaitSyncRequest")
	proto.RegisterType((*WaitSyncResponse)(nil), "client.WaitSyncResponse")
	proto.RegisterType((*IsSyncedRequest)(nil), "client.IsSyncedRequest")
	proto.RegisterType((*IsSyncedResponse)(nil), "client.IsSyncedResponse")
	proto.RegisterType((*WatchBlocksRequest)(nil), "client.WatchBlocksRequest")
	proto.RegisterType((*WatchBlocksResponse)(nil), "client.WatchBlocksResponse")
	proto.RegisterType((*GetBlockRequest)(nil), "client.GetBlockRequest")
	proto.RegisterType((*GetBlockResponse)(nil), "client.GetBlockResponse")
	proto.RegisterType((*GetTxnRequest)(nil), "client.GetTxnRequest")
	proto.RegisterType((*GetTxnResponse)(nil), "client.GetTxnResponse")
	proto.RegisterType((*GetTxnByBlockHashRequest)(nil), "client.GetTxnByBlockHashRequest")
	proto.RegisterType((*GetTxnByBlockHashResponse)(nil), "client.GetTxnByBlockHashResponse")
	proto.RegisterType((*GetTransactionsRequest)(nil), "client.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "client.GetTransactionsResponse")
	proto.RegisterType((*QueryBlockRequest)(nil), "client.QueryBlockRequest")
	proto.RegisterType((*QueryBlockResponse)(nil), "client.QueryBlockResponse")
	proto.RegisterType((*QueryTxnRequest)(nil), "client.QueryTxnRequest")
	proto.RegisterType((*QueryTxnResponse)(nil), "client.QueryTxnResponse")
	proto.RegisterType((*QueryTxnsRequest)(nil), "client.QueryTxnsRequest")
	proto.RegisterType((*QueryTxnsResponse)(nil), "client.QueryTxnsResponse")
	proto.RegisterType((*WaitBlockIndexedRequest)(nil), "client.WaitBlockIndexedRequest")
	proto.RegisterType((*WaitBlockIndexedResponse)(nil), "client.WaitBlockIndexedResponse")
}

func init() { proto.RegisterFile("ekiden/grpc/client.proto", fileDescriptor_26cb6050da50c3e4) }

var fileDescriptor_26cb6050da50c3e4 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdf, 0x4f, 0x13, 0x41,
	0x10, 0x6e, 0x05, 0x0b, 0x8c, 0x60, 0xcb, 0xaa, 0x70, 0x9c, 0x51, 0xea, 0x3e, 0x11, 0x12, 0xa8,
	0x01, 0x5f, 0x7c, 0x32, 0x69, 0xd4, 0x5a, 0x4c, 0x4c, 0x3c, 0x48, 0x30, 0x7d, 0x21, 0xdb, 0xbb,
	0x0d, 0xbd, 0x50, 0xee, 0xca, 0xed, 0x1e, 0xb6, 0x7f, 0xb3, 0xff, 0x84, 0xd9, 0x5f, 0xb7, 0xc7,
	0x5d, 0x81, 0xd3, 0xbe, 0xed, 0xcc, 0xce, 0x7c, 0xf3, 0xed, 0x74, 0xe6, 0xeb, 0x81, 0x43, 0xaf,
	0xc2, 0x80, 0x46, 0x9d, 0xcb, 0x64, 0xe2, 0x77, 0xfc, 0x71, 0x48, 0x23, 0x7e, 0x38, 0x49, 0x62,
	0x1e, 0xa3, 0x86, 0xb2, 0xf0, 0x67, 0x68, 0x9e, 0xa6, 0xc3, 0xeb, 0x90, 0x9f, 0x4d, 0x3d, 0x7a,
	0x93, 0x52, 0xc6, 0x11, 0x82, 0xe5, 0x80, 0x70, 0xe2, 0xd4, 0xdb, 0xf5, 0xbd, 0x75, 0x4f, 0x9e,
	0xd1, 0x1b, 0x80, 0x24, 0x8d, 0x78, 0x78, 0x4d, 0x2f, 0xc2, 0xc0, 0x79, 0x22, 0x6f, 0xd6, 0xb4,
	0xa7, 0x1f, 0xe0, 0x7d, 0x68, 0x59, 0x14, 0x36, 0x89, 0x23, 0x46, 0xd1, 0x16, 0x34, 0x12, 0xca,
	0xd2, 0x31, 0xd7, 0x40, 0xda, 0xc2, 0x9b, 0xd0, 0x3c, 0x27, 0x21, 0x3f, 0x9d, 0x45, 0xbe, 0xae,
	0x88, 0x11, 0xb4, 0xac, 0x4b, 0xa5, 0x8b, 0xb0, 0x3e, 0x13, 0x1e, 0x1a, 0x98, 0xb0, 0x7d, 0x68,
	0x59, 0x97, 0xad, 0xc2, 0xa4, 0x47, 0x56, 0x59, 0xf5, 0xb4, 0x85, 0x8f, 0x01, 0x9d, 0x13, 0xee,
	0x8f, 0xba, 0xe3, 0xd8, 0xbf, 0x62, 0xe6, 0x69, 0x77, 0x9f, 0x51, 0x2f, 0x3e, 0xe3, 0x04, 0x5e,
	0xdc, 0x49, 0xd2, 0x35, 0x5e, 0xc2, 0xd3, 0xa1, 0xf0, 0xe8, 0x04, 0x65, 0x08, 0x2c, 0x79, 0xb8,
	0x18, 0x11, 0x36, 0x32, 0x2d, 0x91, 0x9e, 0x6f, 0x84, 0x8d, 0xf0, 0x57, 0x68, 0xf6, 0x28, 0x97,
	0x48, 0xd5, 0xaa, 0x8b, 0x32, 0x49, 0x9c, 0x46, 0xaa, 0xbd, 0xcb, 0x9e, 0x32, 0x70, 0x0f, 0x5a,
	0x16, 0x67, 0x11, 0x42, 0x03, 0xd8, 0xe8, 0x51, 0x7e, 0x36, 0x8d, 0x16, 0xa1, 0x23, 0xbc, 0x61,
	0x14, 0xd0, 0xa9, 0xb3, 0xd4, 0xae, 0xef, 0x6d, 0x78, 0xca, 0xc0, 0x7b, 0xf0, 0xdc, 0x60, 0x3f,
	0xf2, 0xeb, 0x47, 0xe0, 0xa8, 0xc8, 0xee, 0xac, 0x6b, 0xa8, 0x55, 0x24, 0xf4, 0xf0, 0xfb, 0xee,
	0x61, 0x76, 0x0c, 0x3b, 0x73, 0xea, 0x3d, 0x42, 0xf2, 0x3b, 0x6c, 0x89, 0xa4, 0x84, 0x44, 0x8c,
	0xf8, 0x3c, 0x8c, 0xa3, 0x8a, 0x03, 0x24, 0x56, 0x27, 0x89, 0x63, 0xae, 0xc9, 0xc9, 0x33, 0x3e,
	0x80, 0xed, 0x12, 0x98, 0xae, 0x8f, 0x60, 0x99, 0x4f, 0x23, 0xe6, 0xd4, 0xdb, 0x4b, 0x22, 0x5c,
	0x9c, 0xf1, 0x00, 0x36, 0x7f, 0xa6, 0x34, 0x99, 0xfd, 0xcb, 0xe4, 0xb4, 0x60, 0xe9, 0x8a, 0xce,
	0x74, 0x55, 0x71, 0x14, 0xcd, 0xb8, 0x25, 0xe3, 0x94, 0xca, 0x66, 0xac, 0x7b, 0xca, 0xc0, 0x7d,
	0x40, 0x79, 0xec, 0x45, 0xa6, 0xe9, 0x17, 0x34, 0x25, 0x54, 0xf5, 0x79, 0xaa, 0x4a, 0x72, 0x1f,
	0x5a, 0x16, 0xf9, 0x91, 0x1f, 0xaa, 0x67, 0x63, 0x59, 0xf5, 0xb1, 0xbe, 0x11, 0x29, 0x9a, 0x88,
	0x32, 0xf0, 0x81, 0xee, 0xba, 0x02, 0xd2, 0x55, 0x1d, 0x58, 0x51, 0x75, 0x98, 0x86, 0x31, 0x26,
	0xfe, 0x01, 0xdb, 0x42, 0xb0, 0x64, 0x1f, 0xfb, 0x62, 0xce, 0x32, 0x91, 0xfa, 0xbf, 0x25, 0x77,
	0xc1, 0x29, 0xe3, 0x29, 0x16, 0x47, 0x7f, 0x1a, 0xb0, 0xe2, 0xa9, 0x7c, 0xf4, 0x09, 0x56, 0x8d,
	0xce, 0xa2, 0xed, 0x43, 0x2d, 0xe8, 0x05, 0xfd, 0x76, 0x9d, 0xf2, 0x85, 0xd6, 0xd4, 0x9a, 0x00,
	0x30, 0x4a, 0x6b, 0x01, 0x0a, 0x72, 0x6c, 0x01, 0x4a, 0xa2, 0x2c, 0x01, 0x8c, 0x06, 0x5b, 0x80,
	0x82, 0x50, 0x5b, 0x80, 0xa2, 0x5c, 0xe3, 0x1a, 0x3a, 0x81, 0x67, 0x39, 0x8d, 0x45, 0xae, 0xad,
	0x55, 0x54, 0x6b, 0xf7, 0xf5, 0xdc, 0x3b, 0x83, 0xf4, 0xbe, 0x2e, 0xc8, 0x18, 0x6d, 0xb4, 0x64,
	0x0a, 0xaa, 0x6b, 0xc9, 0x14, 0x65, 0x14, 0xd7, 0xd0, 0x47, 0x68, 0x28, 0x75, 0x40, 0xaf, 0x72,
	0x51, 0x76, 0xa6, 0xdd, 0xad, 0xa2, 0x3b, 0x4b, 0x1d, 0xc0, 0x66, 0x49, 0x58, 0x50, 0xfb, 0x6e,
	0x78, 0x59, 0xe3, 0xdc, 0x77, 0x0f, 0x44, 0x64, 0xd8, 0x67, 0xf2, 0xbf, 0x23, 0x2f, 0x19, 0xe8,
	0x6d, 0x3e, 0xaf, 0x2c, 0x4c, 0xee, 0xee, 0xbd, 0xf7, 0x19, 0xea, 0x17, 0x00, 0xbb, 0xfd, 0x68,
	0xc7, 0x24, 0x94, 0xd4, 0xc6, 0x75, 0xe7, 0x5d, 0xe5, 0x27, 0xc0, 0xac, 0x8a, 0x6d, 0x7a, 0x41,
	0x0b, 0x6c, 0xd3, 0x8b, 0xab, 0x8c, 0x6b, 0xa8, 0x0b, 0x6b, 0xd9, 0xae, 0xa1, 0x52, 0x60, 0xf6,
	0xa2, 0x9d, 0x39, 0x37, 0x19, 0xc6, 0xb9, 0xfa, 0x62, 0xc8, 0x2f, 0x0c, 0xda, 0xcd, 0x8f, 0xed,
	0x9c, 0xd5, 0x74, 0xdb, 0xf7, 0x07, 0x18, 0xe0, 0xee, 0x87, 0xc1, 0xd1, 0x65, 0xc8, 0x47, 0xe9,
	0xf0, 0xd0, 0x8f, 0xaf, 0x3b, 0x31, 0x61, 0x21, 0x1b, 0x93, 0x21, 0xeb, 0x04, 0xf4, 0x96, 0x8e,
	0xe3, 0x09, 0x4d, 0x0e, 0x2e, 0x09, 0xa7, 0xbf, 0xc9, 0xac, 0x93, 0xfb, 0xb4, 0x1a, 0x36, 0xe4,
	0x47, 0xd5, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x70, 0x9b, 0x88, 0x70, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuntimeClient interface {
	// Submit a transaction to leader.
	SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	// Wait for the node to finish syncing.
	WaitSync(ctx context.Context, in *WaitSyncRequest, opts ...grpc.CallOption) (*WaitSyncResponse, error)
	// Check if the node is finished syncing.
	IsSynced(ctx context.Context, in *IsSyncedRequest, opts ...grpc.CallOption) (*IsSyncedResponse, error)
	// Subscribe to roothash blocks.
	WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (Runtime_WatchBlocksClient, error)
	// Get roothash block at specific round.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// Get transaction at specific round and index.
	GetTxn(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnResponse, error)
	// Get transaction at specific block hash and index.
	GetTxnByBlockHash(ctx context.Context, in *GetTxnByBlockHashRequest, opts ...grpc.CallOption) (*GetTxnByBlockHashResponse, error)
	// Get transactions at specific transaction root.
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	// Query the block index of a given runtime.
	QueryBlock(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error)
	// Query the transaction index of a given runtime.
	QueryTxn(ctx context.Context, in *QueryTxnRequest, opts ...grpc.CallOption) (*QueryTxnResponse, error)
	// Query the transaction index of a given runtime with a complex
	// query and returns multiple results.
	QueryTxns(ctx context.Context, in *QueryTxnsRequest, opts ...grpc.CallOption) (*QueryTxnsResponse, error)
	// Wait for a block to be indexed by the indexer.
	WaitBlockIndexed(ctx context.Context, in *WaitBlockIndexedRequest, opts ...grpc.CallOption) (*WaitBlockIndexedResponse, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) WaitSync(ctx context.Context, in *WaitSyncRequest, opts ...grpc.CallOption) (*WaitSyncResponse, error) {
	out := new(WaitSyncResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/WaitSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) IsSynced(ctx context.Context, in *IsSyncedRequest, opts ...grpc.CallOption) (*IsSyncedResponse, error) {
	out := new(IsSyncedResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/IsSynced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (Runtime_WatchBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[0], "/client.Runtime/WatchBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeWatchBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_WatchBlocksClient interface {
	Recv() (*WatchBlocksResponse, error)
	grpc.ClientStream
}

type runtimeWatchBlocksClient struct {
	grpc.ClientStream
}

func (x *runtimeWatchBlocksClient) Recv() (*WatchBlocksResponse, error) {
	m := new(WatchBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) GetTxn(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnResponse, error) {
	out := new(GetTxnResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/GetTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) GetTxnByBlockHash(ctx context.Context, in *GetTxnByBlockHashRequest, opts ...grpc.CallOption) (*GetTxnByBlockHashResponse, error) {
	out := new(GetTxnByBlockHashResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/GetTxnByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) QueryBlock(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error) {
	out := new(QueryBlockResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/QueryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) QueryTxn(ctx context.Context, in *QueryTxnRequest, opts ...grpc.CallOption) (*QueryTxnResponse, error) {
	out := new(QueryTxnResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/QueryTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) QueryTxns(ctx context.Context, in *QueryTxnsRequest, opts ...grpc.CallOption) (*QueryTxnsResponse, error) {
	out := new(QueryTxnsResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/QueryTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) WaitBlockIndexed(ctx context.Context, in *WaitBlockIndexedRequest, opts ...grpc.CallOption) (*WaitBlockIndexedResponse, error) {
	out := new(WaitBlockIndexedResponse)
	err := c.cc.Invoke(ctx, "/client.Runtime/WaitBlockIndexed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServer is the server API for Runtime service.
type RuntimeServer interface {
	// Submit a transaction to leader.
	SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error)
	// Wait for the node to finish syncing.
	WaitSync(context.Context, *WaitSyncRequest) (*WaitSyncResponse, error)
	// Check if the node is finished syncing.
	IsSynced(context.Context, *IsSyncedRequest) (*IsSyncedResponse, error)
	// Subscribe to roothash blocks.
	WatchBlocks(*WatchBlocksRequest, Runtime_WatchBlocksServer) error
	// Get roothash block at specific round.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// Get transaction at specific round and index.
	GetTxn(context.Context, *GetTxnRequest) (*GetTxnResponse, error)
	// Get transaction at specific block hash and index.
	GetTxnByBlockHash(context.Context, *GetTxnByBlockHashRequest) (*GetTxnByBlockHashResponse, error)
	// Get transactions at specific transaction root.
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	// Query the block index of a given runtime.
	QueryBlock(context.Context, *QueryBlockRequest) (*QueryBlockResponse, error)
	// Query the transaction index of a given runtime.
	QueryTxn(context.Context, *QueryTxnRequest) (*QueryTxnResponse, error)
	// Query the transaction index of a given runtime with a complex
	// query and returns multiple results.
	QueryTxns(context.Context, *QueryTxnsRequest) (*QueryTxnsResponse, error)
	// Wait for a block to be indexed by the indexer.
	WaitBlockIndexed(context.Context, *WaitBlockIndexedRequest) (*WaitBlockIndexedResponse, error)
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).SubmitTx(ctx, req.(*SubmitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_WaitSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).WaitSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/WaitSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).WaitSync(ctx, req.(*WaitSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_IsSynced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSyncedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).IsSynced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/IsSynced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).IsSynced(ctx, req.(*IsSyncedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_WatchBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).WatchBlocks(m, &runtimeWatchBlocksServer{stream})
}

type Runtime_WatchBlocksServer interface {
	Send(*WatchBlocksResponse) error
	grpc.ServerStream
}

type runtimeWatchBlocksServer struct {
	grpc.ServerStream
}

func (x *runtimeWatchBlocksServer) Send(m *WatchBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Runtime_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_GetTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/GetTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetTxn(ctx, req.(*GetTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_GetTxnByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxnByBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetTxnByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/GetTxnByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetTxnByBlockHash(ctx, req.(*GetTxnByBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).QueryBlock(ctx, req.(*QueryBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_QueryTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).QueryTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/QueryTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).QueryTxn(ctx, req.(*QueryTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_QueryTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).QueryTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/QueryTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).QueryTxns(ctx, req.(*QueryTxnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_WaitBlockIndexed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitBlockIndexedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).WaitBlockIndexed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Runtime/WaitBlockIndexed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).WaitBlockIndexed(ctx, req.(*WaitBlockIndexedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTx",
			Handler:    _Runtime_SubmitTx_Handler,
		},
		{
			MethodName: "WaitSync",
			Handler:    _Runtime_WaitSync_Handler,
		},
		{
			MethodName: "IsSynced",
			Handler:    _Runtime_IsSynced_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Runtime_GetBlock_Handler,
		},
		{
			MethodName: "GetTxn",
			Handler:    _Runtime_GetTxn_Handler,
		},
		{
			MethodName: "GetTxnByBlockHash",
			Handler:    _Runtime_GetTxnByBlockHash_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Runtime_GetTransactions_Handler,
		},
		{
			MethodName: "QueryBlock",
			Handler:    _Runtime_QueryBlock_Handler,
		},
		{
			MethodName: "QueryTxn",
			Handler:    _Runtime_QueryTxn_Handler,
		},
		{
			MethodName: "QueryTxns",
			Handler:    _Runtime_QueryTxns_Handler,
		},
		{
			MethodName: "WaitBlockIndexed",
			Handler:    _Runtime_WaitBlockIndexed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBlocks",
			Handler:       _Runtime_WatchBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ekiden/grpc/client.proto",
}
